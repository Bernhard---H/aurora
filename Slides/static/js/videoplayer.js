// Generated by CoffeeScript 1.7.1
(function() {
  this.Videoplayer = (function() {
    function Videoplayer(directory, url, clip, chapters) {
      this.directory = directory;
      this.url = url;
      this.clip = clip;
      this.chapters = chapters;
      this.activeChapter = -1;
      this.loaded = false;
      this.loading = false;
      this.label = $("#flowplayer_controls_label");
      this.play = $("#flowplayer_controls_play");
      this.prev = $("#flowplayer_controls_prev");
      this.next = $("#flowplayer_controls_next");
      this.whereAmI = $("#flowplayer_controls_where_am_i");
      this.play.click((function(_this) {
        return function() {
          return _this.load(0);
        };
      })(this));
      this.setControllerState("play_only");
    }

    Videoplayer.prototype.load = function(chapter) {
      if (chapter == null) {
        chapter = 0;
      }
      return $f("flowplayer_invisible", this.directory + 'flowplayer-3.2.16.swf', {
        debug: false,
        clip: {
          url: this.clip,
          debug: false,
          provider: 'rtmp',
          autoPlay: true,
          autoBuffering: true,
          onStart: (function(_this) {
            return function() {
              _this.loaded = true;
              _this.setState("active");
              return _this.seekToChapter(chapter);
            };
          })(this)
        },
        plugins: {
          rtmp: {
            url: this.directory + 'flowplayer.rtmp-3.2.12.swf',
            netConnectionUrl: this.url
          }
        }
      });
    };

    Videoplayer.prototype.setControllerState = function(state) {
      this.resetControllerState();
      switch (state) {
        case "play_only":
          this.label.text("Play Audio");
          return this.play.removeClass("disabled");
        case "loading":
          this.label.text("Loading");
          this.play.removeClass("disabled");
          return this.play.addClass("loading");
        case "active":
          this.label.text("Playing");
          this.prev.removeClass("disabled");
          this.play.removeClass("disabled");
          this.play.removeClass("loading");
          this.next.removeClass("disabled");
          return this.whereAmI.removeClass("disabled");
        case "error":
          this.play.text("Error");
          return this.play.text("ERROR");
      }
    };

    Videoplayer.prototype.resetControllerState = function() {
      this.prev.addClass("disabled");
      this.play.addClass("disabled");
      this.next.addClass("disabled");
      return this.whereAmI.addClass("disabled");
    };

    Videoplayer.prototype.seekChapter = function(chapter) {
      return console.log("seeking to chapter: " + chapter);
    };

    Videoplayer.prototype.togglePlay = function() {
      if (!this.loading) {
        if (loaded) {
          if ($().isPlaying) {
            return this.pause();
          } else {
            return this.play();
          }
        } else {
          this.setControllerState("loading");
          this.loading = true;
          return this.load;
        }
      }
    };

    Videoplayer.prototype.play = function() {
      this.play.text("PAUSE");
      return $f.play();
    };

    Videoplayer.prototype.pause = function() {
      this.play.text("PLAY");
      return $f.pause();
    };

    Videoplayer.prototype.prev = function() {
      return console.log("previous chapter");
    };

    Videoplayer.prototype.next = function() {
      return console.log("next chapter");
    };

    return Videoplayer;

  })();

}).call(this);
